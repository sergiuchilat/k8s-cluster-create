---
- name: Setup Kubernetes Cluster with Kubeadm
  hosts: all
  gather_facts: yes
  become: yes
  # serial: 1
  user: root
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

  tasks:
    # Install required packages
    - name: Update package list
      apt:
        update_cache: yes

    - name: disable SWAP (Kubeadm requirement)
      shell: |
        swapoff -a

    - name: disable SWAP in fstab (Kubeadm requirement)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present

    # Add Kubernetes apt repository
    - name: Create keyring directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes apt keyring
      ansible.builtin.shell: | 
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | 
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'

    - name: Update package list after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - containerd
        state: present

    - name: Hold Kubernetes packages
      ansible.builtin.shell: apt-mark hold kubelet kubeadm kubectl

    # Load required kernel modules
    - name: Load overlay kernel module
      modprobe:
        name: overlay

    - name: Load br_netfilter kernel module
      modprobe:
        name: br_netfilter

    # Configure sysctl for networking
    - name: Enable IP forwarding and bridge-nf-call-iptables
      copy:
        dest: /etc/sysctl.conf
        content: |
          net.ipv4.ip_forward=1
          net.bridge.bridge-nf-call-iptables=1
        owner: root
        group: root
        mode: '0644'

    - name: Reload sysctl configuration
      command: sysctl -p /etc/sysctl.conf

    # Configure containerd
    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory

    - name: Write containerd configuration
      copy:
        dest: /etc/containerd/config.toml
        content: |
          version = 2
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              [plugins."io.containerd.grpc.v1.cri".containerd]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
                    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                      SystemdCgroup = true

    - name: Restart containerd service
      service:
        name: containerd
        state: restarted

- name: Initialize Kubernetes Cluster with Kubeadm
  hosts: master
  gather_facts: yes
  become: yes
  user: root
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

  tasks:
    # Initialize Kubernetes control plane
    - name: Initialize Kubernetes control plane
      ansible.builtin.shell: |
        kubeadm init \
        --apiserver-advertise-address={{ ansible_private_ip }} \
        --pod-network-cidr=10.244.0.0/16 \
        --apiserver-cert-extra-sans={{ ansible_public_ip }}
      args:
        creates: /etc/kubernetes/admin.conf

    # Configure kubeconfig for the default user
    - name: Create kubeconfig directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"

    # (Optional) Add worker nodes
    - name: Generate kubeadm token
      command: kubeadm token generate
      register: kubeadm_token

    - name: Generate kubeadm join command
      command: kubeadm token create {{ kubeadm_token.stdout }} --print-join-command --ttl=0
      register: kubeadm_join_command

    - name: Set join command for worker nodes
      set_fact:
        join_command: "{{ kubeadm_join_command.stdout }}"
      when: kubeadm_join_command is defined


- name: Join Kubernetes Cluster with Kubeadm
  hosts: workers
  gather_facts: yes
  become: yes
  user: root
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

  tasks:
    - name: Join Kubernetes cluster
      ansible.builtin.shell: "{{ hostvars['master']['join_command'] }}"
      when: hostvars['master']['join_command'] is defined

- name: Install Flannel CNI
  hosts: master
  gather_facts: yes
  become: yes
  user: root
  vars:
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

  tasks:
    - name: Install Flannel CNI
      ansible.builtin.shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      args:
        executable: /bin/bash
